{"version":3,"sources":["assets/images/keyboard.svg","store/constants.js","store/actions/keyboardAction.js","components/TimeOut.js","components/Navbar.js","assets/images/reload.svg","components/WordsInput.js","components/LoadingWords.js","components/WordsSection.js","components/Alert.js","pages/Keyboard.js","App.js","reportWebVitals.js","store/reducers/keyboardReducer.js","store/reducers/index.js","store/store.js","index.js"],"names":["constants","fetchWords","dispatch","axios","get","then","data","setApiWords","word","type","payload","timeOut","setTimeout","TimeOut","useDispatch","active","useSelector","keyboard","activeTimeOut","time","React","useEffect","className","Navbar","src","keyboardImg","alt","WordsInput","words","inputRef","useRef","useState","userTypedLetter","setUserTypedLetter","addLetter","ref","autoFocus","value","onChange","e","target","onClick","ReloadImg","randomInteger","min","max","rand","Math","random","floor","LoadingWords","arrLength","Array","fill","map","_","index","Fragment","style","width","WordsSection","randomWords","wordShift","listCorrectLetter","typedWord","scrollRef","isWrong","setIsWrong","every","current","scrollBy","overflow","length","item","classNames","Alert","wpm","Wpm","App","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","rootReducer","combineReducers","state","action","wordsInBool","randomLetter","split","userLetter","join","console","log","replace","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7a3a6293.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/keyboard.66ffea3e.svg\";","export const constants = {\r\n  WORD_INPUT_EVENT: 'keyboard/WORD_INPUT_EVENT',\r\n  SET_API_WORDS: 'keyboard/SET_API_WORDS',\r\n  ADD_LETTER: 'keyboard/ADD_LETTER',\r\n  KEYBOARD_EVENT: 'keyboard/KEYBOARD_EVENT',\r\n  TIME_OUT_EVENT: 'keyboard/TIME_OUT_EVENT',\r\n  RE_START: 'keyboard/RE_START',\r\n  CHANGE_TIME: 'keyboard/CHANGE_TIME',\r\n}\r\n","import axios from 'axios'\r\nimport { constants } from '../constants'\r\n\r\nexport const fetchWords = () => (dispatch) => {\r\n  axios\r\n    .get('https://random-word-api.herokuapp.com/word?number=380')\r\n    .then(({ data }) => {\r\n      dispatch(setApiWords(data))\r\n    })\r\n}\r\n\r\nexport const setApiWords = (word) => ({\r\n  type: constants.SET_API_WORDS,\r\n  payload: word,\r\n})\r\n\r\nexport const wordInputEvent = () => ({ type: constants.WORD_INPUT_EVENT })\r\nexport const keyboardEvent = (symbol) => ({\r\n  type: constants.KEYBOARD_EVENT,\r\n  payload: symbol,\r\n})\r\nexport const addLetter = (userTypedLetter) => ({\r\n  type: constants.ADD_LETTER,\r\n  payload: userTypedLetter,\r\n})\r\nexport const timeOutEvent = () => ({\r\n  type: constants.TIME_OUT_EVENT,\r\n})\r\n\r\nexport const timeOut = () => (dispatch) => {\r\n  setTimeout(() => {\r\n    dispatch(timeOutEvent())\r\n  }, 1000)\r\n}\r\nexport const restartApp = () => ({ type: constants.RE_START })\r\nexport const changeTime = (time) => ({\r\n  type: constants.CHANGE_TIME,\r\n  payload: time,\r\n})\r\n","import React from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { timeOut } from '../store/actions/keyboardAction'\r\n\r\nconst TimeOut = () => {\r\n  const dispatch = useDispatch()\r\n\r\n  const active = useSelector(({ keyboard }) => keyboard.activeTimeOut)\r\n  const time = useSelector(({ keyboard }) => keyboard.time)\r\n  React.useEffect(() => {\r\n    if (active === true && time > 0) {\r\n      dispatch(timeOut())\r\n    }\r\n  }, [time, active, dispatch])\r\n\r\n  return <span className=\"time\">0:{time < 10 ? `0${time}` : time}</span>\r\n}\r\n\r\nexport default TimeOut\r\n","import React from 'react'\r\nimport keyboardImg from '../assets/images/keyboard.svg'\r\nimport TimeOut from './TimeOut'\r\nconst Navbar = () => {\r\n  return (\r\n    <section className=\"navbar-section\">\r\n      <div className=\"navbar\">\r\n        <span>\r\n          <img className=\"navbar-logo\" src={keyboardImg} alt=\"wpm\" />\r\n          <span className=\"wpm\">WPM</span>\r\n        </span>\r\n        <TimeOut />\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Navbar\r\n","export default __webpack_public_path__ + \"static/media/reload.94fc110c.svg\";","import React from 'react'\r\nimport ReloadImg from '../assets/images/reload.svg'\r\nimport { useDispatch } from 'react-redux'\r\nimport {\r\n  addLetter,\r\n  wordInputEvent,\r\n  fetchWords,\r\n  changeTime,\r\n  restartApp,\r\n} from '../store/actions/keyboardAction'\r\n\r\nconst WordsInput = ({ words }) => {\r\n  const inputRef = React.useRef()\r\n  const dispatch = useDispatch()\r\n  const [userTypedLetter, setUserTypedLetter] = React.useState('')\r\n\r\n  React.useEffect(() => {\r\n    dispatch(fetchWords())\r\n  }, [dispatch])\r\n\r\n  React.useEffect(() => {\r\n    dispatch(addLetter(userTypedLetter))\r\n    dispatch(wordInputEvent())\r\n  }, [dispatch, userTypedLetter])\r\n  const restart = () => {\r\n    dispatch(restartApp())\r\n    dispatch(fetchWords())\r\n    dispatch(changeTime(60))\r\n  }\r\n  return (\r\n    <div className=\"input-container\" ref={inputRef}>\r\n      <input\r\n        autoFocus\r\n        className=\"words-input\"\r\n        value={words}\r\n        onChange={(e) => setUserTypedLetter(e.target.value)}\r\n      />\r\n\r\n      <button className=\"refresh-button\" onClick={restart}>\r\n        <img src={ReloadImg} alt=\"Reload\" />\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default WordsInput\r\n","import React from 'react'\r\n\r\nconst LoadingWords = ({ arrLength }) => {\r\n  return (\r\n    <>\r\n      {Array(arrLength)\r\n        .fill(null)\r\n        .map((_, index) => (\r\n          <React.Fragment key={index}>\r\n            <div\r\n              className=\"loading-word\"\r\n              style={{ width: `${randomInteger(60, 110)}px` }}\r\n            ></div>\r\n            {(index + 1) % 10 === 0 && <br />}\r\n          </React.Fragment>\r\n        ))}\r\n    </>\r\n  )\r\n}\r\n\r\nfunction randomInteger(min, max) {\r\n  let rand = min + Math.random() * (max + 1 - min)\r\n  return Math.floor(rand)\r\n}\r\n\r\nexport default LoadingWords\r\n","import React from 'react'\r\nimport classNames from 'classnames'\r\nimport LoadingWords from './LoadingWords'\r\n\r\nconst WordsSection = ({\r\n  randomWords,\r\n  wordShift,\r\n  listCorrectLetter,\r\n  typedWord,\r\n}) => {\r\n  const scrollRef = React.useRef(null)\r\n\r\n  let [isWrong, setIsWrong] = React.useState(false)\r\n  React.useEffect(() => {\r\n    setIsWrong(listCorrectLetter.every((e) => e === true))\r\n  }, [listCorrectLetter])\r\n  React.useEffect(() => {\r\n    if (wordShift % 8 === 0) {\r\n      scrollRef.current.scrollBy(0, 40)\r\n    }\r\n\r\n    scrollRef.current.style.overflow = 'hidden'\r\n  }, [wordShift])\r\n  return (\r\n    <div className=\"random-words\">\r\n      <div className=\"words-section\" ref={scrollRef}>\r\n        {!randomWords.length && <LoadingWords arrLength={30} />}\r\n        {randomWords &&\r\n          randomWords.map((item, index) => {\r\n            return (\r\n              <React.Fragment key={item}>\r\n                <span\r\n                  className={classNames(\r\n                    { 'current-word': index === wordShift },\r\n                    { 'wrong-word': index === wordShift && !isWrong },\r\n                    { 'typed-words': typedWord[index] === item }\r\n                  )}\r\n                >\r\n                  {item}\r\n                </span>\r\n                {(index + 1) % 8 === 0 && <br />}\r\n              </React.Fragment>\r\n            )\r\n          })}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default WordsSection\r\n","import React from 'react'\r\n\r\nconst Alert = ({ wpm }) => {\r\n  return <div className=\"alert\">Typing test score:{wpm} wpm</div>\r\n}\r\n\r\nexport default Alert\r\n","import React from 'react'\r\nimport Navbar from '../components/Navbar'\r\nimport WordsInput from '../components/WordsInput'\r\nimport WordsSection from '../components/WordsSection'\r\n\r\nimport { useSelector } from 'react-redux'\r\nimport Alert from '../components/Alert'\r\nfunction Wpm() {\r\n  const {\r\n    userTypedLetter,\r\n    randomWords,\r\n    wordShift,\r\n    listCorrectLetter,\r\n    typedWord,\r\n    time,\r\n  } = useSelector(({ keyboard }) => keyboard)\r\n\r\n  return (\r\n    <div>\r\n      <Navbar />\r\n      {time === 0 ? (\r\n        <Alert wpm={wordShift} />\r\n      ) : (\r\n        <WordsSection\r\n          randomWords={randomWords}\r\n          listCorrectLetter={listCorrectLetter}\r\n          wordShift={wordShift}\r\n          typedWord={typedWord}\r\n        />\r\n      )}\r\n\r\n      <WordsInput words={userTypedLetter} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Wpm\r\n","import React, { Component } from 'react'\r\nimport './App.scss'\r\nimport Wpm from './pages/Keyboard'\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Wpm />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { constants } from '../constants'\r\n\r\nconst initialState = {\r\n  randomWords: [],\r\n  userTypedLetter: '',\r\n  wordShift: 0,\r\n  listCorrectLetter: [],\r\n  typedWord: [],\r\n  activeTimeOut: false,\r\n  time: 60,\r\n}\r\n\r\nexport const keyboard = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case constants.ADD_LETTER:\r\n      return {\r\n        ...state,\r\n        userTypedLetter: action.payload,\r\n      }\r\n\r\n    case constants.WORD_INPUT_EVENT:\r\n      if (state.typedWord.length === state.randomWords.length) return state\r\n\r\n      if (state.time === 0) return state\r\n\r\n      const wordsInBool = []\r\n      const randomLetter = state.randomWords[state.wordShift]?.split('')\r\n\r\n      const userLetter = state.userTypedLetter.split('')\r\n\r\n      if (userLetter.join() === randomLetter?.join()) {\r\n        console.log(userLetter.join(''))\r\n        return {\r\n          ...state,\r\n          wordShift: state.wordShift + 1,\r\n          userTypedLetter: '',\r\n          typedWord: [...state.typedWord, userLetter.join('')],\r\n        }\r\n      }\r\n\r\n      for (let index = 0; index < state.userTypedLetter.length; index++) {\r\n        if (state.userTypedLetter[index] === ' ') {\r\n          return {\r\n            ...state,\r\n            userTypedLetter: state.userTypedLetter.replace(/\\s/g, ''),\r\n          }\r\n        }\r\n\r\n        if (\r\n          state.userTypedLetter &&\r\n          state.userTypedLetter[index] === randomLetter[index]\r\n        ) {\r\n          wordsInBool[index] = true\r\n        } else {\r\n          wordsInBool[index] = false\r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        listCorrectLetter: [...wordsInBool],\r\n        activeTimeOut: true,\r\n      }\r\n\r\n    case constants.SET_API_WORDS:\r\n      return {\r\n        ...state,\r\n        randomWords: action.payload,\r\n      }\r\n\r\n    case constants.TIME_OUT_EVENT:\r\n      if (!state.randomWords.length) {\r\n        return state\r\n      }\r\n      return {\r\n        ...state,\r\n        time: state.time - 1,\r\n      }\r\n    case constants.RE_START:\r\n      return initialState\r\n    case constants.CHANGE_TIME:\r\n      return {\r\n        ...state,\r\n        time: action.payload,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport { keyboard } from \"./keyboardReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  keyboard\r\n})\r\n\r\nexport default rootReducer","\r\nimport {createStore, compose, applyMiddleware} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)))\r\n\r\nexport default store\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\nimport { Provider } from 'react-redux'\r\nimport store from './store/store'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}